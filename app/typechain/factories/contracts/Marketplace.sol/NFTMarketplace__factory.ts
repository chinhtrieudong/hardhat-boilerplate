/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTMarketplace,
  NFTMarketplaceInterface,
} from "../../../contracts/Marketplace.sol/NFTMarketplace";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_listingPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "ListingItemCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "listingId",
        type: "uint256",
      },
    ],
    name: "buyItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "listingId",
        type: "uint256",
      },
    ],
    name: "cancelListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "listingId",
        type: "uint256",
      },
    ],
    name: "getItemPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "getListingItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isSold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarketplace.ListingItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalItems",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalUnsoldItems",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "getUnsoldItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isSold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarketplace.ListingItem[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "listItem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listingItems",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "seller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isSold",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "listingPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalListingItems",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620022a7380380620022a7833981810160405281019062000037919062000178565b620000576200004b6200006c60201b60201c565b6200007460201b60201c565b600180819055508060028190555050620001aa565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b62000152816200013d565b81146200015e57600080fd5b50565b600081519050620001728162000147565b92915050565b60006020828403121562000191576200019062000138565b5b6000620001a18482850162000161565b91505092915050565b6120ed80620001ba6000396000f3fe6080604052600436106100dd5760003560e01c8063be03120d1161007f578063e20f807b11610059578063e20f807b146102cc578063e59b9670146102f7578063e7fb74c714610322578063f2fde38b1461033e576100dd565b8063be03120d14610226578063c78f19f914610263578063cfc621361461028e576100dd565b80634c4df870116100bb5780634c4df87014610177578063715018a6146101b457806389bfd38f146101cb5780638da5cb5b146101fb576100dd565b8063305a67a8146100e2578063310aac691461010b57806331e3a12e14610136575b600080fd5b3480156100ee57600080fd5b506101096004803603810190610104919061151e565b610367565b005b34801561011757600080fd5b5061012061058b565b60405161012d919061155a565b60405180910390f35b34801561014257600080fd5b5061015d6004803603810190610158919061151e565b61059c565b60405161016e9594939291906115f2565b60405180910390f35b34801561018357600080fd5b5061019e6004803603810190610199919061151e565b61061f565b6040516101ab919061155a565b60405180910390f35b3480156101c057600080fd5b506101c961063f565b005b6101e560048036038101906101e09190611671565b610653565b6040516101f2919061155a565b60405180910390f35b34801561020757600080fd5b5061021061093d565b60405161021d91906116c4565b60405180910390f35b34801561023257600080fd5b5061024d600480360381019061024891906116df565b610966565b60405161025a9190611872565b60405180910390f35b34801561026f57600080fd5b50610278610c34565b604051610285919061155a565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906116df565b610c3a565b6040516102c3929190611943565b60405180910390f35b3480156102d857600080fd5b506102e1610f29565b6040516102ee919061155a565b60405180910390f35b34801561030357600080fd5b5061030c610f4e565b604051610319919061155a565b60405180910390f35b61033c6004803603810190610337919061151e565b610f5f565b005b34801561034a57600080fd5b506103656004803603810190610360919061197a565b611151565b005b6000600560008381526020019081526020016000209050600015158160040160009054906101000a900460ff161515146103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90611a04565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045f90611a70565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd303384600001546040518463ffffffff1660e01b81526004016104cd93929190611a90565b600060405180830381600087803b1580156104e757600080fd5b505af11580156104fb573d6000803e3d6000fd5b50505050600560008381526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549060ff021916905550505050565b600061059760036111d4565b905090565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b600060056000838152602001908152602001600020600301549050919050565b6106476111e2565b6106516000611260565b565b600061065d611324565b600082116106a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069790611b13565b60405180910390fd5b60025434146106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90611ba5565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161072193929190611a90565b600060405180830381600087803b15801561073b57600080fd5b505af115801561074f573d6000803e3d6000fd5b50505050600061075f60036111d4565b90506040518060a001604052808581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050506108ce6040518060400160405280601781526020017f4c697374696e67206974656d207769746820696420257300000000000000000081525082611373565b8473ffffffffffffffffffffffffffffffffffffffff1684827ffe4c99c112bfda597518df080ef7b925100c2be054783fd9cceb6ef44648d3a33387604051610918929190611bc5565b60405180910390a461092a600361140f565b80915050610936611425565b9392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008310156109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390611c3a565b60405180910390fd5b600082116109ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e690611ca6565b60405180910390fd5b60006109fb60036111d4565b8385610a079190611cf5565b11610a125782610a28565b83610a1d60036111d4565b610a279190611d29565b5b905060008111610a8f57600067ffffffffffffffff811115610a4d57610a4c611d5d565b5b604051908082528060200260200182016040528015610a8657816020015b610a7361147c565b815260200190600190039081610a6b5790505b50915050610c2e565b60008167ffffffffffffffff811115610aab57610aaa611d5d565b5b604051908082528060200260200182016040528015610ae457816020015b610ad161147c565b815260200190600190039081610ac95790505b50905060005b82811015610c2757600560008783610b029190611cf5565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050828281518110610c0957610c08611d8c565b5b60200260200101819052508080610c1f90611dbb565b915050610aea565b5080925050505b92915050565b60025481565b6060806000841015610c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7890611c3a565b60405180910390fd5b60008311610cc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbb90611ca6565b60405180910390fd5b60008367ffffffffffffffff811115610ce057610cdf611d5d565b5b604051908082528060200260200182016040528015610d1957816020015b610d0661147c565b815260200190600190039081610cfe5790505b50905060008467ffffffffffffffff811115610d3857610d37611d5d565b5b604051908082528060200260200182016040528015610d665781602001602082028036833780820191505090505b5090506000806000610d7860036111d4565b90505b808984610d889190611cf5565b108015610d9457508782105b15610f17576000600560008b86610dab9190611cf5565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090508060800151610f035780868481518110610ebe57610ebd611d8c565b5b60200260200101819052508984610ed59190611cf5565b858481518110610ee857610ee7611d8c565b5b6020026020010181815250508280610eff90611dbb565b9350505b8380610f0e90611dbb565b94505050610d7b565b84849650965050505050509250929050565b6000610f3560046111d4565b610f3f60036111d4565b610f499190611d29565b905090565b6000610f5a60036111d4565b905090565b610f67611324565b6000600560008381526020019081526020016000209050600015158160040160009054906101000a900460ff16151514610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90611a04565b60405180910390fd5b3481600301541461101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390611e4f565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611086573d6000803e3d6000fd5b508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd303384600001546040518463ffffffff1660e01b81526004016110ec93929190611a90565b600060405180830381600087803b15801561110657600080fd5b505af115801561111a573d6000803e3d6000fd5b5050505060018160040160006101000a81548160ff021916908315150217905550611145600461140f565b5061114e611425565b50565b6111596111e2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bf90611ee1565b60405180910390fd5b6111d181611260565b50565b600081600001549050919050565b6111ea61142e565b73ffffffffffffffffffffffffffffffffffffffff1661120861093d565b73ffffffffffffffffffffffffffffffffffffffff161461125e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125590611f4d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136090611fb9565b60405180910390fd5b6002600181905550565b61140b8282604051602401611389929190612058565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611436565b5050565b6001816000016000828254019250508190555050565b60018081905550565b600033905090565b61144d81611445611450611471565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6114d9819050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6114e1612088565b565b600080fd5b6000819050919050565b6114fb816114e8565b811461150657600080fd5b50565b600081359050611518816114f2565b92915050565b600060208284031215611534576115336114e3565b5b600061154284828501611509565b91505092915050565b611554816114e8565b82525050565b600060208201905061156f600083018461154b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115a082611575565b9050919050565b6115b081611595565b82525050565b60006115c182611575565b9050919050565b6115d1816115b6565b82525050565b60008115159050919050565b6115ec816115d7565b82525050565b600060a082019050611607600083018861154b565b61161460208301876115a7565b61162160408301866115c8565b61162e606083018561154b565b61163b60808301846115e3565b9695505050505050565b61164e81611595565b811461165957600080fd5b50565b60008135905061166b81611645565b92915050565b60008060006060848603121561168a576116896114e3565b5b60006116988682870161165c565b93505060206116a986828701611509565b92505060406116ba86828701611509565b9150509250925092565b60006020820190506116d960008301846115a7565b92915050565b600080604083850312156116f6576116f56114e3565b5b600061170485828601611509565b925050602061171585828601611509565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611754816114e8565b82525050565b61176381611595565b82525050565b611772816115b6565b82525050565b611781816115d7565b82525050565b60a08201600082015161179d600085018261174b565b5060208201516117b0602085018261175a565b5060408201516117c36040850182611769565b5060608201516117d6606085018261174b565b5060808201516117e96080850182611778565b50505050565b60006117fb8383611787565b60a08301905092915050565b6000602082019050919050565b600061181f8261171f565b611829818561172a565b93506118348361173b565b8060005b8381101561186557815161184c88826117ef565b975061185783611807565b925050600181019050611838565b5085935050505092915050565b6000602082019050818103600083015261188c8184611814565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006118cc838361174b565b60208301905092915050565b6000602082019050919050565b60006118f082611894565b6118fa818561189f565b9350611905836118b0565b8060005b8381101561193657815161191d88826118c0565b9750611928836118d8565b925050600181019050611909565b5085935050505092915050565b6000604082019050818103600083015261195d8185611814565b9050818103602083015261197181846118e5565b90509392505050565b6000602082840312156119905761198f6114e3565b5b600061199e8482850161165c565b91505092915050565b600082825260208201905092915050565b7f4974656d20697320616c726561647920736f6c64000000000000000000000000600082015250565b60006119ee6014836119a7565b91506119f9826119b8565b602082019050919050565b60006020820190508181036000830152611a1d816119e1565b9050919050565b7f4f6e6c792073656c6c65722063616e2063616e63656c206c697374696e670000600082015250565b6000611a5a601e836119a7565b9150611a6582611a24565b602082019050919050565b60006020820190508181036000830152611a8981611a4d565b9050919050565b6000606082019050611aa560008301866115a7565b611ab260208301856115a7565b611abf604083018461154b565b949350505050565b7f5072696365206d7573742062652067726561746572207468616e203000000000600082015250565b6000611afd601c836119a7565b9150611b0882611ac7565b602082019050919050565b60006020820190508181036000830152611b2c81611af0565b9050919050565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b6000611b8f6024836119a7565b9150611b9a82611b33565b604082019050919050565b60006020820190508181036000830152611bbe81611b82565b9050919050565b6000604082019050611bda60008301856115a7565b611be7602083018461154b565b9392505050565b7f6f6666736574206d7573742062652067726561746572207468616e2030000000600082015250565b6000611c24601d836119a7565b9150611c2f82611bee565b602082019050919050565b60006020820190508181036000830152611c5381611c17565b9050919050565b7f6c696d6974206d7573742062652067726561746572207468616e203000000000600082015250565b6000611c90601c836119a7565b9150611c9b82611c5a565b602082019050919050565b60006020820190508181036000830152611cbf81611c83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d00826114e8565b9150611d0b836114e8565b9250828201905080821115611d2357611d22611cc6565b5b92915050565b6000611d34826114e8565b9150611d3f836114e8565b9250828203905081811115611d5757611d56611cc6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611dc6826114e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611df857611df7611cc6565b5b600182019050919050565b7f5072696365206973206e6f7420636f7272656374000000000000000000000000600082015250565b6000611e396014836119a7565b9150611e4482611e03565b602082019050919050565b60006020820190508181036000830152611e6881611e2c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ecb6026836119a7565b9150611ed682611e6f565b604082019050919050565b60006020820190508181036000830152611efa81611ebe565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f376020836119a7565b9150611f4282611f01565b602082019050919050565b60006020820190508181036000830152611f6681611f2a565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611fa3601f836119a7565b9150611fae82611f6d565b602082019050919050565b60006020820190508181036000830152611fd281611f96565b9050919050565b600081519050919050565b60005b83811015612002578082015181840152602081019050611fe7565b60008484015250505050565b6000601f19601f8301169050919050565b600061202a82611fd9565b61203481856119a7565b9350612044818560208601611fe4565b61204d8161200e565b840191505092915050565b60006040820190508181036000830152612072818561201f565b9050612081602083018461154b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea26469706673582212203b8f53e1249162fd5c23d37ae584e276aaa52bb19e1853e1657ed93679e83c8e64736f6c63430008110033";

type NFTMarketplaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketplaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarketplace__factory extends ContractFactory {
  constructor(...args: NFTMarketplaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _listingPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarketplace> {
    return super.deploy(
      _listingPrice,
      overrides || {}
    ) as Promise<NFTMarketplace>;
  }
  override getDeployTransaction(
    _listingPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_listingPrice, overrides || {});
  }
  override attach(address: string): NFTMarketplace {
    return super.attach(address) as NFTMarketplace;
  }
  override connect(signer: Signer): NFTMarketplace__factory {
    return super.connect(signer) as NFTMarketplace__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketplaceInterface {
    return new utils.Interface(_abi) as NFTMarketplaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarketplace {
    return new Contract(address, _abi, signerOrProvider) as NFTMarketplace;
  }
}
